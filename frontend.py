import streamlit as st
import requests

# Base URL da API do backend (Flask)
BASE_URL = "http://127.0.0.1:5000"

# Fun√ß√£o gen√©rica para fazer requisi√ß√µes ao backend
def fazer_requisicao(endpoint, method="GET", params=None, data=None):
    url = f"{BASE_URL}/{endpoint}"

    try:
        if method == "GET":
            response = requests.get(url, params=params)
        elif method == "POST":
            response = requests.post(url, json=data)
        elif method == "PUT":
            response = requests.put(url, json=data)
        elif method == "DELETE":
            response = requests.delete(url, params=params)
        else:
            st.error("M√©todo HTTP n√£o suportado.")
            return None

        if response.status_code == 200:
            return response.json()
        elif response.status_code == 201:
            st.success("Opera√ß√£o realizada com sucesso!")
            return response.json()
        elif response.status_code == 404:
            st.warning("‚ö†Ô∏è Recurso n√£o encontrado.")
        elif response.status_code == 500:
            st.error("‚ö†Ô∏è Erro interno do servidor.")
        else:
            st.error(f"‚ö†Ô∏è Erro: {response.status_code} - {response.text}")

        return None

    except Exception as e:
        st.error(f"‚ö†Ô∏è Erro de conex√£o: {e}")
        return None

# T√≠tulo principal com layout centralizado e espa√ßamento
st.markdown("<h1 style='text-align: center; color: #2E86C1;'>üö≤ Empr√©stimo de Bikes</h1>", unsafe_allow_html=True)
st.markdown("<h4 style='text-align: center; color: #5D6D7E;'>Encontre a bike ideal para voc√™</h4>", unsafe_allow_html=True)
st.write("")

# Sidebar para os filtros e op√ß√µes
opcao = st.sidebar.selectbox(
    "Escolha uma funcionalidade",
    ["Gerenciar Usu√°rios", "Gerenciar Bikes", "Gerenciar Empr√©stimos"]
)

# USUARIOS
if opcao == "Gerenciar Usu√°rios":
    st.sidebar.header("üë§ Gest√£o de Usu√°rios")

    # Op√ß√µes para visualizar ou gerenciar usu√°rios
    acao_usuario = st.sidebar.selectbox("A√ß√£o", ["Visualizar Usu√°rios", "Adicionar Usu√°rio", "Atualizar Usu√°rio", "Excluir Usu√°rio"])

    if acao_usuario == "Visualizar Usu√°rios":
        st.header("üë• Lista de Usu√°rios")
        usuarios = fazer_requisicao('usuarios')

        if usuarios and 'usuarios' in usuarios:
            for usuario in usuarios['usuarios']:
                st.markdown(f"**ID:** {usuario['id']}, **Nome:** {usuario['nome']}, **CPF:** {usuario['cpf']}")
        else:
            st.warning("‚ö†Ô∏è Nenhum usu√°rio encontrado.")

    elif acao_usuario == "Adicionar Usu√°rio":
        st.header("‚ûï Adicionar Novo Usu√°rio")
        nome = st.text_input("Nome")
        cpf = st.text_input("CPF")
        data_nascimento = st.date_input("Data de Nascimento")

        if st.button("Adicionar Usu√°rio"):
            if nome and cpf and data_nascimento:
                dados_usuario = {
                    "nome": nome,
                    "cpf": cpf,
                    "data_de_nascimento": str(data_nascimento)
                }
                fazer_requisicao('usuarios', method="POST", data=dados_usuario)
            else:
                st.error("‚ö†Ô∏è Todos os campos s√£o obrigat√≥rios.")

    elif acao_usuario == "Atualizar Usu√°rio":
        st.header("‚úèÔ∏è Atualizar Usu√°rio")
        user_id = st.text_input("ID do Usu√°rio para atualizar")
        novo_nome = st.text_input("Novo Nome")
        novo_cpf = st.text_input("Novo CPF")
        nova_data_nascimento = st.date_input("Nova Data de Nascimento")

        if st.button("Atualizar Usu√°rio"):
            if user_id and novo_nome and novo_cpf and nova_data_nascimento:
                dados_atualizados = {
                    "nome": novo_nome,
                    "cpf": novo_cpf,
                    "data_de_nascimento": str(nova_data_nascimento)
                }
                fazer_requisicao(f'usuarios/{user_id}', method="PUT", data=dados_atualizados)
            else:
                st.error("‚ö†Ô∏è Todos os campos s√£o obrigat√≥rios.")

    elif acao_usuario == "Excluir Usu√°rio":
        st.header("‚ùå Excluir Usu√°rio")
        user_id = st.text_input("ID do Usu√°rio para excluir")

        if st.button("Excluir Usu√°rio"):
            if user_id:
                response = fazer_requisicao(f'usuarios/{user_id}', method="DELETE")
                if response:
                    st.success("‚úÖ Bike exclu√≠da com sucesso!")
            else:
                st.warning("‚ö†Ô∏è O ID da bike √© obrigat√≥rio.")

# BIKES
elif opcao == "Gerenciar Bikes":
    st.sidebar.header("üö≤ Gest√£o de Bikes")

    # Op√ß√µes para visualizar ou gerenciar bikes
    acao_bike = st.sidebar.selectbox("A√ß√£o", ["Visualizar Bikes", "Adicionar Bike", "Atualizar Bike", "Excluir Bike"])

    if acao_bike == "Visualizar Bikes":
        st.header("üö≤ Lista de Bikes")
        bikes = fazer_requisicao('bikes')

        if bikes and 'bikes' in bikes:
            for bike in bikes['bikes']:
                st.markdown(f"**ID:** {bike['id']}, **Marca:** {bike['marca']}, **Modelo:** {bike['modelo']}, **Cidade:** {bike['cidade']}")
        else:
            st.warning("‚ö†Ô∏è Nenhuma bike encontrada.")

    elif acao_bike == "Adicionar Bike":
        st.header("‚ûï Adicionar Nova Bike")
        marca = st.text_input("Marca da bike:")
        modelo = st.text_input("Modelo da bike:")
        cidade = st.text_input("Cidade:")

        if st.button("Adicionar Bike"):
            if marca and modelo and cidade:
                bike_data = {
                    "marca": marca,
                    "modelo": modelo,
                    "cidade": cidade
                }
                response = fazer_requisicao('bikes', method="POST", data=bike_data)
                if response:
                    st.success("‚úÖ Bike adicionada com sucesso!")
            else:
                st.warning("‚ö†Ô∏è Todos os campos s√£o obrigat√≥rios.")

    elif acao_bike == "Atualizar Bike":
        st.header("‚úèÔ∏è Atualizar Bike")
        id_bike = st.text_input("ID da Bike para atualizar:")
        marca_editar = st.text_input("Nova Marca:")
        modelo_editar = st.text_input("Novo Modelo:")
        cidade_editar = st.text_input("Nova Cidade:")

        if st.button("Atualizar Bike"):
            if id_bike and (marca_editar or modelo_editar or cidade_editar):
                data_atualizar = {}
                if marca_editar:
                    data_atualizar['marca'] = marca_editar
                if modelo_editar:
                    data_atualizar['modelo'] = modelo_editar
                if cidade_editar:
                    data_atualizar['cidade'] = cidade_editar

                response = fazer_requisicao(f'bikes/{id_bike}', method="PUT", data=data_atualizar)
                if response:
                    st.success("‚úÖ Bike atualizada com sucesso!")
            else:
                st.warning("‚ö†Ô∏è Preencha o ID e ao menos um campo para atualiza√ß√£o.")

    elif acao_bike == "Excluir Bike":
        st.header("‚ùå Excluir Bike")
        id_bike = st.text_input("ID da Bike para excluir")

        if st.button("Excluir Bike"):
            if id_bike:
                response = fazer_requisicao(f'bikes/{id_bike}', method="DELETE")
                if response:
                    st.success("‚úÖ Bike exclu√≠da com sucesso!")
            else:
                st.warning("‚ö†Ô∏è O ID da bike √© obrigat√≥rio.")

# EMPRESTIMOS
if opcao == "Gerenciar Empr√©stimos":
    st.sidebar.header("üìÑ Gest√£o de Empr√©stimos")

    # Op√ß√µes para visualizar ou gerenciar empr√©stimos
    acao_emprestimo = st.sidebar.selectbox("A√ß√£o", ["Visualizar Empr√©stimos", "Criar Empr√©stimo", "Finalizar Empr√©stimo"])

    if acao_emprestimo == "Visualizar Empr√©stimos":
        st.header("üìÑ Lista de Empr√©stimos")
        emprestimos = fazer_requisicao('emprestimos')

        if emprestimos and 'emprestimos' in emprestimos:
            for emprestimo in emprestimos['emprestimos']:
                st.markdown(f"**ID Empr√©stimo:** {emprestimo['_id']}, **Usu√°rio:** {emprestimo['usuario_id']}, **Bike:** {emprestimo['bike_id']}, **Data de aluguel:** {emprestimo['data_aluguel']}")
        else:
            st.warning("‚ö†Ô∏è Nenhum empr√©stimo encontrado.")

    elif acao_emprestimo == "Criar Empr√©stimo":
        st.header("‚ûï Criar Novo Empr√©stimo")
        user_id = st.text_input("ID do Usu√°rio")
        bike_id = st.text_input("ID da Bike")

        if st.button("Criar Empr√©stimo"):
            if user_id and bike_id:
                dados_emprestimo = {
                    "usuario_id": user_id,
                    "bike_id": bike_id
                }
                fazer_requisicao(f'emprestimos/usuarios/{user_id}/bikes/{bike_id}', method="POST", data=dados_emprestimo)
            else:
                st.error("‚ö†Ô∏è Todos os campos s√£o obrigat√≥rios.")

    elif acao_emprestimo == "Finalizar Empr√©stimo":
        st.header("‚ùå Finalizar Empr√©stimo")
        emprestimo_id = st.text_input("ID do Empr√©stimo para finalizar")

        if st.button("Finalizar Empr√©stimo"):
            if emprestimo_id:
                fazer_requisicao(f'emprestimos/{emprestimo_id}', method="DELETE", data={"status": "finalizado"})
            else:
                st.warning("‚ö†Ô∏è O ID do empr√©stimo √© obrigat√≥rio.")


